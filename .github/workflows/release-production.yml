name: 🚀 Production Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # PRODUCTION DEPLOYMENT
  # ============================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🏷️ Create release tag
        id: tag
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          
          # Remove 'v' prefix for version calculation
          VERSION=${LATEST_TAG#v}
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Determine version bump type
          VERSION_TYPE="${{ github.event.inputs.version_type || 'patch' }}"
          
          case $VERSION_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 🐳 Build production images
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.tag.outputs.version }} ./backend
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.tag.outputs.version }} ./frontend

      - name: 🏷️ Create and push tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.tag.outputs.version }}
          git push origin ${{ steps.tag.outputs.version }}

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LATEST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ]; then
            CHANGELOG=$(git log $LATEST_TAG..HEAD --pretty=format:"- %s (%h)" --reverse)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🎉 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.version }}
          release_name: Release ${{ steps.tag.outputs.version }}
          body: |
            ## 🚀 CardioLive Release ${{ steps.tag.outputs.version }}
            
            ### 📋 Changes in this release:
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ### 🔗 Deployment Links:
            - **Frontend:** [Production Site](https://your-production-url.com)
            - **Backend API:** [API Documentation](https://your-api-url.com/docs)
            
            ### 📊 Build Information:
            - **Commit:** ${{ github.sha }}
            - **Build Date:** ${{ github.run_id }}
            - **Node Version:** ${{ env.NODE_VERSION }}
          draft: false
          prerelease: false

      # Add your actual production deployment steps here
      - name: 🌟 Production deployment placeholder
        run: |
          echo "🎯 This is where production deployment would happen"
          echo "✅ Release ${{ steps.tag.outputs.version }} ready for production"
