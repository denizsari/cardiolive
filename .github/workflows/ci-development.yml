name: 🔧 Development CI/CD

on:
  push:
    branches: [development]
  pull_request:
    branches: [development]

env:
  NODE_VERSION: '20'
  CACHE_DEPENDENCY_PATH: |
    backend/package-lock.json
    frontend/package-lock.json

jobs:
  # ============================================
  # LINTING AND CODE QUALITY CHECKS
  # ============================================
  lint-and-format:
    name: 🔍 Lint & Format Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: [backend, frontend]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.directory }}/package-lock.json

      - name: 📦 Install dependencies
        working-directory: ${{ matrix.directory }}
        run: npm ci

      - name: 🔍 Run ESLint
        working-directory: ${{ matrix.directory }}
        run: npm run lint

      - name: 💅 Check Prettier formatting
        working-directory: ${{ matrix.directory }}
        run: npm run format:check || true

  # ============================================
  # BACKEND TESTING
  # ============================================
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: 📦 Install backend dependencies
        working-directory: backend
        run: npm ci

      - name: 🧪 Run backend tests
        working-directory: backend
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://admin:password@localhost:27017/cardiolive_test?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          JWT_REFRESH_SECRET: test-refresh-secret-key
        run: npm test

      - name: 📊 Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          directory: backend
          flags: backend

  # ============================================
  # FRONTEND TESTING
  # ============================================
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: 🏗️ Build frontend
        working-directory: frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:5000/api
        run: npm run build

      - name: 🧪 Run frontend tests
        working-directory: frontend
        run: npm test

      - name: 📊 Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          directory: frontend
          flags: frontend

  # ============================================
  # SECURITY SCANNING
  # ============================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Run npm audit (Backend)
        working-directory: backend
        run: npm audit --audit-level=moderate || true

      - name: 🔍 Run npm audit (Frontend)
        working-directory: frontend
        run: npm audit --audit-level=moderate || true

  # ============================================
  # INTEGRATION TESTS
  # ============================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Install root dependencies
        run: npm ci

      - name: 🧪 Run integration tests
        env:
          NODE_ENV: test
          MONGO_URI: mongodb://admin:password@localhost:27017/cardiolive_test?authSource=admin
        run: npm run test:integration || true

  # ============================================
  # DEPLOY TO STAGING
  # ============================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, integration-tests]
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Build Docker images
        run: |
          docker build -t cardiolive-backend:staging ./backend
          docker build -t cardiolive-frontend:staging ./frontend

      - name: 📝 Create deployment summary
        run: |
          echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** development" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ✅ Ready for staging deployment" >> $GITHUB_STEP_SUMMARY

      # Add your actual staging deployment steps here
      # Example: Deploy to Heroku, AWS, etc.
      - name: 📋 Staging deployment placeholder
        run: |
          echo "🎯 This is where staging deployment would happen"
          echo "✅ All checks passed - ready for deployment"
