name: Security and Quality Checks

on:
  pull_request:
    branches: [ main, development ]
  push:
    branches: [ main, development ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run npm audit (Backend)
        run: |
          cd backend
          npm audit --audit-level=high --production
          npm audit fix --dry-run

      - name: Run npm audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=high --production
          npm audit fix --dry-run

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Check for known vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: ESLint Backend
        run: |
          cd backend
          npx eslint . --ext .js,.ts --format=compact --max-warnings=0

      - name: ESLint Frontend
        run: |
          cd frontend
          npx eslint . --ext .js,.jsx,.ts,.tsx --format=compact --max-warnings=0

      - name: Prettier Check
        run: |
          cd backend && npx prettier --check .
          cd ../frontend && npx prettier --check .

      - name: TypeScript Check (Frontend)
        run: |
          cd frontend
          npx tsc --noEmit

  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run Backend Tests
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://root:password@localhost:27017/cardiolive_test?authSource=admin
          JWT_SECRET: test-secret-key-for-ci
        run: |
          cd backend
          npm test -- --coverage --watchAll=false

      - name: Run Frontend Tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Build Backend
        run: |
          cd backend
          npm run build

      - name: Build Frontend
        run: |
          cd frontend
          npm run build

      - name: Check bundle size
        run: |
          cd frontend
          npx bundlesize

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Build project
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Start server
        run: |
          cd frontend
          npm start &
          sleep 30

      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  accessibility-test:
    name: Accessibility Test
    runs-on: ubuntu-latest
    needs: [build-and-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build project
        run: |
          cd frontend
          npm run build

      - name: Start server
        run: |
          cd frontend
          npm start &
          sleep 30

      - name: Run axe accessibility tests
        run: |
          npx @axe-core/cli http://localhost:3000
          npx @axe-core/cli http://localhost:3000/products
          npx @axe-core/cli http://localhost:3000/about
