name: Deployment Pipeline

on:
  push:
    branches:
      - main # Production deployment
      - development # Staging deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      should-deploy: ${{ steps.check-deploy.outputs.should-deploy }}
    
    steps:
      - name: Determine environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

      - name: Check if should deploy
        id: check-deploy
        run: |
          if [[ "${{ steps.set-env.outputs.environment }}" != "none" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should-deploy == 'true'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (Backend)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata (Frontend)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.cardiolive.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: SSH to staging server and pull new images
          echo "✅ Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          # Add smoke tests for staging environment
          curl -f https://staging.cardiolive.com/health || exit 1
          echo "✅ Smoke tests passed"

      - name: Notify deployment
        run: |
          echo "📢 Staging deployment notification sent"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [prepare, build-and-push]
    if: needs.prepare.outputs.environment == 'production'
    environment:
      name: production
      url: https://cardiolive.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment record
        run: |
          echo "📝 Recording production deployment..."
          echo "Deployment Time: $(date)"
          echo "Commit SHA: ${{ github.sha }}"
          echo "Deployed by: ${{ github.actor }}"

      - name: Deploy to production server
        run: |
          echo "🚀 Deploying to production environment..."
          # Add your production deployment commands here
          # Example: Blue-green deployment, rolling updates, etc.
          echo "✅ Production deployment completed"

      - name: Run health checks
        run: |
          echo "🏥 Running health checks on production..."
          # Add comprehensive health checks
          curl -f https://cardiolive.com/health || exit 1
          curl -f https://api.cardiolive.com/health || exit 1
          echo "✅ Health checks passed"

      - name: Update monitoring
        run: |
          echo "📊 Updating monitoring dashboards..."
          # Update monitoring with new deployment info
          echo "✅ Monitoring updated"

      - name: Notify deployment
        run: |
          echo "📢 Production deployment notification sent"

  rollback:
    name: Rollback (Manual Trigger)
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    environment:
      name: ${{ needs.prepare.outputs.environment }}
    
    steps:
      - name: Rollback deployment
        run: |
          echo "🔄 Rolling back deployment..."
          # Add rollback logic here
          echo "✅ Rollback completed"

      - name: Notify rollback
        run: |
          echo "⚠️ Rollback notification sent"

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Update documentation
        run: |
          echo "📚 Updating deployment documentation..."
          # Update changelog, deployment logs, etc.

      - name: Performance monitoring
        run: |
          echo "📈 Setting up performance monitoring..."
          # Trigger performance monitoring for new deployment

      - name: Security scan
        run: |
          echo "🔒 Running post-deployment security scan..."
          # Run security scans on live environment

      - name: Backup verification
        run: |
          echo "💾 Verifying backup systems..."
          # Ensure backups are working after deployment
