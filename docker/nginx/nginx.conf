# Cardiolive E-commerce Platform - Production Nginx Configuration
# High-performance reverse proxy with SSL, security headers, and caching

user nginx;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
}

http {
    # Basic Configuration
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Performance Optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate Limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=50r/s;
    
    # Connection Limiting
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Security Headers
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=()" always;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    access_log /var/log/nginx/access.log main;
    
    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Upstream Servers
    upstream backend {
        least_conn;
        server backend:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    upstream frontend {
        least_conn;
        server frontend:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # HTTP to HTTPS Redirect
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint for load balancer
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Redirect all HTTP requests to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # Main HTTPS Server
    server {
        listen 443 ssl http2;
        server_name _;
        
        # SSL Certificate Configuration
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # Security Headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' ws: wss:;" always;
        
        # Rate Limiting
        limit_req zone=general burst=20 nodelay;
        limit_conn addr 10;
        
        # Static File Caching
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|pdf|txt|woff|woff2)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            access_log off;
        }
        
        # API Routes - Backend Proxy
        location /api/ {
            # Rate limiting for API
            limit_req zone=api burst=10 nodelay;
            
            # Authentication endpoints get stricter rate limiting
            location ~* ^/api/(auth|users)/(login|register|forgot-password|reset-password) {
                limit_req zone=auth burst=5 nodelay;
                proxy_pass http://backend;
                include /etc/nginx/proxy_params;
            }
            
            # General API proxy
            proxy_pass http://backend;
            include /etc/nginx/proxy_params;
            
            # CORS Headers for API
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Credentials true always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Accept, Accept-Language, Content-Language, Content-Type, Authorization, X-CSRF-Token" always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin "$http_origin" always;
                add_header Access-Control-Allow-Credentials true always;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, PATCH, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Accept, Accept-Language, Content-Language, Content-Type, Authorization, X-CSRF-Token" always;
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type text/plain;
                add_header Content-Length 0;
                return 204;
            }
        }
        
        # Health Check Endpoints
        location /health {
            proxy_pass http://backend/health;
            include /etc/nginx/proxy_params;
            access_log off;
        }
        
        location /api/health {
            proxy_pass http://backend/health;
            include /etc/nginx/proxy_params;
            access_log off;
        }
        
        # Admin Panel Routes (Additional Security)
        location /admin/ {
            # Stricter rate limiting for admin
            limit_req zone=api burst=5 nodelay;
            
            # Additional security headers for admin
            add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;
            
            proxy_pass http://frontend;
            include /etc/nginx/proxy_params;
        }
        
        # Frontend Application - Next.js
        location / {
            proxy_pass http://frontend;
            include /etc/nginx/proxy_params;
            
            # Next.js specific headers
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            
            # Handle WebSocket connections for dev hot reload
            proxy_http_version 1.1;
            proxy_cache_bypass $http_upgrade;
            
            # Error pages
            error_page 502 503 504 /50x.html;
        }
        
        # Error Pages
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
        
        # Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ /(package\.json|yarn\.lock|\.env|docker-compose\.yml)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}

# Include additional configuration files
include /etc/nginx/conf.d/*.conf;
